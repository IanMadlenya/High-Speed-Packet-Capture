package com.maxeler.packetCapture;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Fanout;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParamArray;
import com.maxeler.networking.statemachines.superfifo.DDRFifo;
import com.maxeler.networking.statemachines.superfifo.SimpleWire;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.EthernetChecksumMode;
import com.maxeler.networking.v1.managers.netlib.EthernetStream;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.TCPStream;
import com.maxeler.packetCapture.serverRouting.AdvancedRRKernel;
import com.maxeler.packetCapture.types.FrameTypes;

public class CaptureManager extends NetworkManager
{
	private static final int FRAME_BITS = 70;
	private static final int FRAME_CHUNK_BITS = 128;
	private static final int BURST_BITS = 192;
	private static final long FIFO_START = 0;
	private static final long FIFO_DEPTH = 16 * 1024 * 1024;
	private static final int SERVER_COUNT_MAX = 2;

	private static final Max4NetworkConnection CAPTURE_PORT = Max4NetworkConnection.QSFP_TOP_10G_PORT1;
	private static final Max4NetworkConnection SERVER_PORT = Max4NetworkConnection.QSFP_TOP_10G_PORT2;

	public static void main( String[] args )
	{

		EngineParameters params = new EngineParameters(args);
		CaptureManager manager = new CaptureManager(params);

		manager.createSLiCinterface(createCaptureInterface());
		manager.createSLiCinterface(createConfigServersInterface(SERVER_COUNT_MAX));
		manager.createSLiCinterface(createReadInterface());


		manager.debug.setDebugLevel(new DebugLevel(){{this.setHasStreamStatus(true);}});

		manager.build();
	}

	public CaptureManager( EngineParameters params )
	{
		super(params);
		int writeBits = BURST_BITS * 2;
		int dataLen = writeBits / 128;
		FrameTypes types = new FrameTypes(128, dataLen, writeBits);

		// create capture input
		EthernetStream capturePort = addEthernetStream("dataIn", CAPTURE_PORT, EthernetChecksumMode.DropBadFrames);

		// create lmem buffer
		System.out.println("FIFO_DEPTH: " + FIFO_DEPTH);

		StateMachineBlock wire = addStateMachine("cmdWire", new SimpleWire(this, 64));

		getManagerConfiguration().dram.setEnableFlagCommands(true);

		MemoryControlGroup ctrlGroup = addMemoryControlGroup("ctrlGroup", wire.getOutput(SimpleWire.OUTPUT));
		DFELink writeMemStream = addStreamToOnCardMemory("writeMemStream", ctrlGroup);
		DFELink readMemStream = addStreamFromOnCardMemory("readMemStream", ctrlGroup);
		ctrlGroup.finalise();

		StateMachineBlock io = addStateMachine("ddrFifo", new DDRFifo(this, FIFO_START, FIFO_DEPTH,
				ctrlGroup.getStreamIndexIdWithinGroup("writeMemStream"),
				ctrlGroup.getStreamIndexIdWithinGroup("readMemStream"),
				0, 1));

		wire.getInput(SimpleWire.INPUT) <== io.getOutput(DDRFifo.OUTPUT_MEM_COMMAND);

		writeMemStream <== io.getOutput(DDRFifo.OUTPUT_MEM_DATA);
		io.getInput(DDRFifo.INPUT_MEM_DATA) <== readMemStream;

		// create local stream
		DFELink toCpu = addStreamToCPU("toCpu");

		// create network stream
		TCPStream serverStream = addTCPStream("serverStream", SERVER_PORT);

		// create kernels
		KernelBlock captureK = addKernel(new CaptureKernel(makeKernelParameters("CaptureKernel"), types));
		KernelBlock unpackerK = addKernel(new FramesUnpackerKernel(makeKernelParameters("DataUnpackerKernel"), types));
		KernelBlock socketGenK = addKernel(new AdvancedRRKernel(makeKernelParameters("RoundRobinKernel"), types, SERVER_COUNT_MAX));
		KernelBlock senderK = addKernel(new PacketSenderKernel(makeKernelParameters("PacketSenderK"), types));

		// connect
		captureK.getInput("input") <== capturePort.getReceiveStream();
		io.getInput(DDRFifo.INPUT_DATA) <== captureK.getOutput("packedFrame");

		Fanout dataFan = fanout("dataFan");
		dataFan.getInput() <== io.getOutput(DDRFifo.OUTPUT_DATA);
		toCpu <== dataFan.addOutput("cpu");

		unpackerK.getInput("packedFrames") <== dataFan.addOutput("kernel");
		socketGenK.getInput("framePaddedIn") <== unpackerK.getOutput("frames");

		senderK.getInput("socket") <== socketGenK.getOutput("socket");
		senderK.getInput("framePadded") <== socketGenK.getOutput("framePaddedOut");

		serverStream.getTransmitStream() <== senderK.getOutput("data");

	}

	public static EngineInterface createCaptureInterface( )
	{
		EngineInterface ei = new EngineInterface("capture");

//		InterfaceParam size = ei.addParam("size", CPUTypes.UINT64);
//
//		ei.setStream("captureIn", CPUTypes.UINT64, size);

		ei.route("dataFan -> cpu, dataFan -> kernel");
		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}

	public static EngineInterface createConfigServersInterface( int serverCountMax )
	{
		EngineInterface ei = new EngineInterface("configServers");

		InterfaceParam socketsLen = ei.addParam("socketsLen", CPUTypes.UINT8);
		InterfaceParamArray sockets = ei.addParamArray("sockets", CPUTypes.UINT8);
		sockets.setMaxSize(serverCountMax);

		ei.setScalar("RoundRobinKernel", "socketsLen", socketsLen);

		for( int i=0; i<serverCountMax; i++ )
		{
			InterfaceParam socket = sockets.get(i);
			String name = "socket" + i;
			ei.setScalar("RoundRobinKernel", name, socket);
		}

		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	public static EngineInterface createReadInterface( )
	{
		EngineInterface ei = new EngineInterface("read");

		InterfaceParam bursts = ei.addParam("bursts", CPUTypes.UINT64);
		InterfaceParam size = (bursts * BURST_BITS);

		ei.setStream("toCpu", CPUTypes.UINT64, size);

		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}
}
