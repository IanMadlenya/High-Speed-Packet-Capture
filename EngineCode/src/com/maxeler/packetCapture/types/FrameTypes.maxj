package com.maxeler.packetCapture.types;

import static com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType.sft;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.networking.types.EthernetRXType;

public class FrameTypes
{
	public final EthernetRXType frameType;
	public final DFEType frameRawType;
	public final DFEPaddedStructType framePaddedType;
	public final DFEType framePaddedRawType;
	public final DFEVectorType<DFEVar>framesType;
	public final DFEPaddedStructType framesPaddedType;

	public FrameTypes( int datumPaddedBits, int dataLen, int dataPaddedBits )
	{
		frameType = new com.maxeler.networking.types.EthernetRXType();
		int datumBits = frameType.getTotalBits();
		int datumPadBits = datumPaddedBits - datumBits;
		int dataPadBits = dataPaddedBits - (datumPaddedBits * dataLen);

		report("datumBits = " + datumBits + "b");
		report("datumPadBits = " + datumPadBits + "b");
		report("datumPaddedBits = " + datumPaddedBits + "b");
		report("dataLen = " + dataLen);
		report("dataBits = " + (dataLen * datumPaddedBits) + "b");
		report("dataPadBits = " + dataPadBits + "b");
		report("dataPaddedBits = " + dataPaddedBits + "b");
		report("datumBits = " + datumBits + "b");

		// datum
		frameRawType = DFETypeFactory.dfeRawBits(frameType.getTotalBits());
		framePaddedType = new DFEPaddedStructType(datumPadBits, sft("frame", frameType));
		framePaddedRawType = DFETypeFactory.dfeRawBits(framePaddedType.getTotalBits());

		// data
		framesType = new DFEVectorType<DFEVar>(framePaddedRawType, dataLen);
		framesPaddedType = new DFEPaddedStructType(dataPadBits, sft("frames", framesType));
	}

	private static void report( String msg )
	{
		System.out.println("Types: " + msg);
	}
}
