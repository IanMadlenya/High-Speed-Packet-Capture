package com.maxeler.packetCapture.senders;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.packetCapture.types.FrameTypes;

/*
 * A sender kernel which services sockets in a round robin fashion.
 */
public class RRSenderKernel extends PacketSenderKernel
{

	private final int SOCKET_LEN_MAX = 2;

	public RRSenderKernel( KernelParameters parameters, FrameTypes types )
	{
		super(parameters, types);
	}

	@Override
	public DFEVar getPacketSocket( DFEVar packetEnable, DFEStruct frame )
	{
		DFEType socketLenType = dfeUInt(MathUtils.bitsToRepresent(SOCKET_LEN_MAX));
		DFEVar socketsLen = io.scalarInput("socketsLen", socketLenType);

		DFEVar[] sockets = new DFEVar[SOCKET_LEN_MAX];
		for( int i=0; i<sockets.length; i++ )
		{
			String name = "socket" + i;
			sockets[i] = io.scalarInput(name, SOCKET_TYPE);
		}

		Counter counter = control.count.makeCounter(control.count.makeParams(MathUtils.bitsToAddress(SOCKET_LEN_MAX)).withMax(socketsLen).withEnable(packetEnable));
		DFEVar index = counter.getCount();

		DFEVar socket = control.mux(index, sockets);

		return socket;
	}
}
