package com.maxeler.packetCapture.prototype;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers._Managers;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxdc.Platform;
import com.maxeler.maxeleros.platforms.MAX2Board;
import com.maxeler.maxeleros.platforms.MAX4MAIABoard;
import com.maxeler.maxeleros.platforms.MAX4NBoard;
import com.maxeler.utils.Memory;

public class CaptureManager extends CustomManager
{
	private static final CPUTypes DATA_TYPE = CPUTypes.UINT32;

	private int getDefaultBurstMode() {
		if(_Managers.getBuildManager(this).getPlatform() instanceof MAX2Board)
			return 4;
		else
			return 8;
	}

	public int getBurstSize() {
		/* The standard manager will always use the default memory controller configuration
		 * because the user is not able to set a custom one.
		 * */
		Platform<?,?> platform = _Managers.getBuildManager(this).getPlatform();
		boolean magicECC = platform instanceof MAX4MAIABoard || platform instanceof MAX4NBoard;
		return Memory.getAdjustedBurstSize(this.getMemoryWordSize(platform) * getDefaultBurstMode(), 72, magicECC, magicECC, false);

	}

	public static void main( String[] args )
	{
		EngineParameters params = new EngineParameters(args);
		CaptureManager manager = new CaptureManager(params);

		manager.createSLiCinterface(createCaptureInterface());
		manager.createSLiCinterface(createReadInterface());

		manager.debug.setDebugLevel(new DebugLevel(){{this.setHasStreamStatus(true);}});

		System.out.println("burst mode: " + manager.getDefaultBurstMode() );
		System.out.println("burst size: " + manager.getBurstSize() );

		manager.build();
	}

	public CaptureManager( EngineParameters params )
	{
		super(params);

		// capture
		Kernel captureKernel = new CaptureKernel(makeKernelParameters("captureKernel"));
		KernelBlock captureBlock = addKernel(captureKernel);

		DFELink fromCpu = addStreamFromCPU("fromCpu");
		DFELink input = captureBlock.getInput("input");
		input <== fromCpu;

//		Kernel memKernel = new MemoryKernel(makeKernelParameters("captureKernel"));
//		KernelBlock memBlock = addKernel(memKernel);

		DFELink toMem = addStreamToOnCardMemory("toMem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
		DFELink output = captureBlock.getOutput("output");
		toMem <== output;

		// lmem read
		DFELink fromMem = addStreamFromOnCardMemory("fromMem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
		DFELink toCpu = addStreamToCPU("toCpu");
		toCpu <== fromMem;
	}

	public static EngineInterface createCaptureInterface( )
	{
		EngineInterface ei = new EngineInterface("capture");

		InterfaceParam length = ei.addParam("length", CPUTypes.UINT64);
		InterfaceParam size = (length * DATA_TYPE.sizeInBytes());
		InterfaceParam baseAddr = (ei.addConstant(0) * DATA_TYPE.sizeInBytes());

		InterfaceParam burstSize = ei.addParam("burstSize", CPUTypes.UINT32);
		InterfaceParam memSizeBursts = ei.addParam("memSizeBursts", CPUTypes.UINT32);
		InterfaceParam tailAddr = ei.addParam("tailAddr", CPUTypes.UINT32);

		ei.setScalar("captureKernel", "wordsPerBurst", (burstSize/DATA_TYPE.sizeInBytes()));
		ei.setScalar("captureKernel", "addrMax", memSizeBursts);
		ei.setScalar("captureKernel", "tailAddr", tailAddr);

		ei.setLMemLinear("toMem", baseAddr, size);
		ei.setStream("fromCpu", DATA_TYPE, size);

		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}

	public static EngineInterface createReadInterface( )
	{
		EngineInterface ei = new EngineInterface("read");

		InterfaceParam length = ei.addParam("length", CPUTypes.UINT64);
		InterfaceParam size = (length * DATA_TYPE.sizeInBytes());
		InterfaceParam baseAddr = (ei.addConstant(0) * DATA_TYPE.sizeInBytes());

		ei.setLMemLinear("fromMem", baseAddr, size);
		ei.setStream("toCpu", DATA_TYPE, size);

		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}
}
