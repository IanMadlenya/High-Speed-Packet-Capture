package com.maxeler.packetCapture.prototype;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.networking.statemachines.superfifo.SuperFIFO;
import com.maxeler.networking.statemachines.superfifo.SuperFIFO.FifoIO;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.EthernetChecksumMode;
import com.maxeler.networking.v1.managers.netlib.EthernetStream;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.utils.MemoryManager;

public class CaptureManager extends NetworkManager
{
	private static final int DATA_TYPE_SIZE = 48;
	private static final DFEType DATA_TYPE = DFETypeFactory.dfeUInt(DATA_TYPE_SIZE * 8);
	private static final long FIFO_DEPTH = 1024 * 1024L;

	public static void main( String[] args )
	{
		EngineParameters params = new EngineParameters(args);
		CaptureManager manager = new CaptureManager(params);

		manager.createSLiCinterface(createCaptureInterface());
		manager.createSLiCinterface(createReadInterface());

		manager.debug.setDebugLevel(new DebugLevel(){{this.setHasStreamStatus(true);}});

		manager.build();
	}

	public CaptureManager( EngineParameters params )
	{
		super(params);

		EthernetStream dataCap1 = addEthernetStream("dataIn1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, EthernetChecksumMode.DropBadFrames);
		DFELink toCpu = addStreamToCPU("toCpu");

		MemoryManager lmemOrganizer = new MemoryManager(this);
		System.out.println("DATA_TYPE: " + DATA_TYPE);
		System.out.println("FIFO_DEPTH: " + FIFO_DEPTH);
		FifoIO io = SuperFIFO.create(this, "captureFifo", DATA_TYPE, FIFO_DEPTH, lmemOrganizer);

		io.write <== dataCap1.getReceiveStream();
		toCpu <== io.read;
	}

	public static EngineInterface createCaptureInterface( )
	{
		EngineInterface ei = new EngineInterface("capture");

		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}

	public static EngineInterface createReadInterface( )
	{
		EngineInterface ei = new EngineInterface("read");

		InterfaceParam length = ei.addParam("length", CPUTypes.UINT64);
		InterfaceParam size = (length * DATA_TYPE_SIZE);

		ei.setStream("toCpu", CPUTypes.UINT64, size);

		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}
}
