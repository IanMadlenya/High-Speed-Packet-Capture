package com.maxeler.packetCapture.prototype;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Fanout;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.networking.statemachines.superfifo.DDRFifo;
import com.maxeler.networking.statemachines.superfifo.SimpleWire;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.EthernetChecksumMode;
import com.maxeler.networking.v1.managers.netlib.EthernetStream;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.TCPStream;

public class CaptureManager extends NetworkManager
{
	private static final int FRAME_BITS = 70;
	private static final int FRAME_CHUNK_BITS = 128;
	private static final int BURST_BITS = 192;
	private static final long FIFO_START = 0;
	private static final long FIFO_DEPTH = 16 * 1024 * 1024;

	private static final Max4NetworkConnection CAPTURE_PORT = Max4NetworkConnection.QSFP_TOP_10G_PORT1;
	private static final Max4NetworkConnection SERVER_PORT = Max4NetworkConnection.QSFP_TOP_10G_PORT2;

	public static void main( String[] args )
	{
		EngineParameters params = new EngineParameters(args);
		CaptureManager manager = new CaptureManager(params);

		manager.createSLiCinterface(createCaptureInterface());
		manager.createSLiCinterface(createConfigSendInterface());
		manager.createSLiCinterface(createReadInterface());


		manager.debug.setDebugLevel(new DebugLevel(){{this.setHasStreamStatus(true);}});

		manager.build();
	}

	public CaptureManager( EngineParameters params )
	{
		super(params);
		int writeBits = BURST_BITS * 2;
		int dataLen = writeBits / 128;
		Types types = new Types(128, dataLen, writeBits);

		// create ddr fifo
		System.out.println("FIFO_DEPTH: " + FIFO_DEPTH);

		StateMachineBlock wire = addStateMachine("cmdWire", new SimpleWire(this, 64));

		getManagerConfiguration().dram.setEnableFlagCommands(true);

		MemoryControlGroup ctrlGroup = addMemoryControlGroup("ctrlGroup", wire.getOutput(SimpleWire.OUTPUT));
		DFELink writeMemStream = addStreamToOnCardMemory("writeMemStream", ctrlGroup);
		DFELink readMemStream = addStreamFromOnCardMemory("readMemStream", ctrlGroup);
		ctrlGroup.finalise();

		StateMachineBlock io = addStateMachine("ddrFifo", new DDRFifo(this, FIFO_START, FIFO_DEPTH,
				ctrlGroup.getStreamIndexIdWithinGroup("writeMemStream"),
				ctrlGroup.getStreamIndexIdWithinGroup("readMemStream"),
				0, 1));

		wire.getInput(SimpleWire.INPUT) <== io.getOutput(DDRFifo.OUTPUT_MEM_COMMAND);

		writeMemStream <== io.getOutput(DDRFifo.OUTPUT_MEM_DATA);
		io.getInput(DDRFifo.INPUT_MEM_DATA) <== readMemStream;

//		KernelBlock adapterK = addKernel(new AdapterKernel(makeKernelParameters("adapterKernel"), FRAME_CHUNK_BITS, FRAME_BITS));
//		adapterK.getInput("input") <== addStreamFromCPU("captureIn");

		KernelBlock captureK = addKernel(new CaptureKernel(makeKernelParameters("captureKernel"), types));

		// create capture input
		EthernetStream capturePort = addEthernetStream("dataIn", CAPTURE_PORT, EthernetChecksumMode.DropBadFrames);

		// create data output
		DFELink toCpu = addStreamToCPU("toCpu");
		TCPStream tcpStream = addTCPStream("tcpServerStream", SERVER_PORT);
		KernelBlock senderK = addKernel(new SenderKernel(makeKernelParameters("SenderK"), types));

		// attach
		captureK.getInput("input") <== capturePort.getReceiveStream();
//		captureK.getInput("input") <== adapterK.getOutput("output");
		io.getInput(DDRFifo.INPUT_DATA) <== captureK.getOutput("packedData");

		Fanout dataFan = fanout("dataFan");
		dataFan.getInput() <== io.getOutput(DDRFifo.OUTPUT_DATA);
		toCpu <== dataFan.addOutput("cpu");

		KernelBlock unpackerK = addKernel(new UnpackerKernel(makeKernelParameters("DataUnpackerKernel"), types));
		unpackerK.getInput("packedData") <== dataFan.addOutput("kernel");
		senderK.getInput("datumPadded") <== unpackerK.getOutput("data");
		tcpStream.getTransmitStream() <== senderK.getOutput("datumFrame");

	}

	public static EngineInterface createCaptureInterface( )
	{
		EngineInterface ei = new EngineInterface("capture");

//		InterfaceParam size = ei.addParam("size", CPUTypes.UINT64);
//
//		ei.setStream("captureIn", CPUTypes.UINT64, size);

		ei.route("dataFan -> cpu, dataFan -> kernel");
		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}

	public static EngineInterface createConfigSendInterface( )
	{
		EngineInterface ei = new EngineInterface("configSend");

		InterfaceParam socket = ei.addParam("socket", CPUTypes.INT8);
		ei.setScalar("SenderK", "socket", socket);

		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	public static EngineInterface createReadInterface( )
	{
		EngineInterface ei = new EngineInterface("read");

		InterfaceParam bursts = ei.addParam("bursts", CPUTypes.UINT64);
		InterfaceParam size = (bursts * BURST_BITS);

		ei.setStream("toCpu", CPUTypes.UINT64, size);

		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}
}
