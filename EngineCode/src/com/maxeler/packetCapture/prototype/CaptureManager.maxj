package com.maxeler.packetCapture.prototype;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.networking.v1.managers.NetworkManager;

public class CaptureManager extends NetworkManager
{
	private static final CPUTypes DATA_TYPE = CPUTypes.UINT32;
	private static final CPUTypes ADDR_TYPE = CPUTypes.UINT64;

	public static void main( String[] args )
	{
		EngineParameters params = new EngineParameters(args);
		CaptureManager manager = new CaptureManager(params);

		manager.createSLiCinterface(createCaptureInterface());
		manager.createSLiCinterface(createReadInterface());
		manager.createSLiCinterface(createHeadInterface());
		manager.createSLiCinterface(createTailInterface());

		manager.debug.setDebugLevel(new DebugLevel(){{this.setHasStreamStatus(true);}});

		manager.build();
	}

	public CaptureManager( EngineParameters params )
	{
		super(params);

		// capture
		Kernel captureKernel = new CaptureKernel(makeKernelParameters("captureKernel"));
		KernelBlock captureBlock = addKernel(captureKernel);

		DFELink fromCpu = addStreamFromCPU("fromCpu");
		DFELink input = captureBlock.getInput("input");
		input <== fromCpu;

		Kernel addrWriteKernel = new MemoryKernel(makeKernelParameters("addrWriteKernel"));
		KernelBlock addrWriteBlock = addKernel(addrWriteKernel);

		DFELink toMem = addStreamToOnCardMemory("toMem", addrWriteBlock.getOutput("cmdStream"));
		DFELink output = captureBlock.getOutput("output");
		toMem <== output;

		// lmem read
		Kernel addrReadKernel = new MemoryKernel(makeKernelParameters("addrReadKernel"));
		KernelBlock addrReadBlock = addKernel(addrReadKernel);

		DFELink fromMem = addStreamFromOnCardMemory("fromMem", addrReadBlock.getOutput("cmdStream"));
		DFELink toCpu = addStreamToCPU("toCpu");
		toCpu <== fromMem;
	}

	public static EngineInterface createCaptureInterface( )
	{
		EngineInterface ei = new EngineInterface("capture");

		InterfaceParam length = ei.addParam("length", CPUTypes.UINT64);
		InterfaceParam size = (length * DATA_TYPE.sizeInBytes());
		InterfaceParam startAddr = ei.addConstant(0);

		InterfaceParam burstSize = ei.addParam("burstSize", CPUTypes.UINT32);
		InterfaceParam memSizeBursts = ei.addParam("memSizeBursts", ADDR_TYPE);
		InterfaceParam tailAddr = ei.addParam("tailAddr", CPUTypes.UINT32);
		InterfaceParam wordsPerBurst = (burstSize/DATA_TYPE.sizeInBytes());

		InterfaceParam totalBursts = size / burstSize;
		ei.setScalar("addrWriteKernel", "startAddr", startAddr);
		ei.setScalar("addrWriteKernel", "totalBursts", totalBursts);
		ei.setScalar("addrWriteKernel", "wordsPerBurst", wordsPerBurst);
		ei.setLMemInterruptOn("toMem");

		ei.setScalar("captureKernel", "wordsPerBurst", wordsPerBurst);
		ei.setScalar("captureKernel", "addrMax", memSizeBursts);
		ei.setScalar("captureKernel", "tailAddr", tailAddr);

		ei.setStream("fromCpu", DATA_TYPE, size);

		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}

	public static EngineInterface createHeadInterface( )
	{
		EngineInterface ei = new EngineInterface("getHead");

		ei.ignoreAll(Direction.IN_OUT);
		ei.unignoreScalar("captureKernel", "headAddr");

		return ei;
	}

	public static EngineInterface createTailInterface( )
	{
		EngineInterface ei = new EngineInterface("setTail");

		InterfaceParam tailAddr = ei.addParam("tailAddr", ADDR_TYPE);
		ei.setScalar("captureKernel", "tailAddr", tailAddr);

		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}

	public static EngineInterface createReadInterface( )
	{
		EngineInterface ei = new EngineInterface("read");

		InterfaceParam length = ei.addParam("length", ADDR_TYPE);
		InterfaceParam size = (length * DATA_TYPE.sizeInBytes());
		InterfaceParam burstSize = ei.addParam("burstSize", CPUTypes.UINT32);
		InterfaceParam tailAddr = ei.addParam("tailAddr", ADDR_TYPE);

		ei.setStream("toCpu", DATA_TYPE, size);

		ei.ignoreAll(Direction.IN_OUT);

		InterfaceParam totalBursts = size / burstSize;
		InterfaceParam wordsPerBurst = (burstSize/DATA_TYPE.sizeInBytes());
		ei.setScalar("addrReadKernel", "startAddr", tailAddr);
		ei.setScalar("addrReadKernel", "totalBursts", totalBursts);
		ei.setScalar("addrReadKernel", "wordsPerBurst", wordsPerBurst);
		ei.setLMemInterruptOn("fromMem");

		ei.ignoreAll(Direction.IN_OUT);

		return ei;
	}
}
