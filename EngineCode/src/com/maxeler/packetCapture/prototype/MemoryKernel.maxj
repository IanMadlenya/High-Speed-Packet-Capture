package com.maxeler.packetCapture.prototype;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class MemoryKernel extends Kernel
{

	protected MemoryKernel( KernelParameters parameters )
	{
		super(parameters);
		flush.disabled();

		DFEVar startAddr = io.scalarInput("startAddr", dfeUInt(32));
		DFEVar totalBursts = io.scalarInput("totalBursts", dfeUInt(32));
		DFEVar wordsPerBurst = io.scalarInput("wordsPerBurst", dfeUInt(32));

		totalBursts.simWatch("totalBursts");
		wordsPerBurst.simWatch("wordsPerBurst");

		CounterChain chain = control.count.makeCounterChain();
		DFEVar burstCount = chain.addCounter(totalBursts, 1);
		DFEVar wordCount = chain.addCounter(wordsPerBurst, 1);
		burstCount.simWatch("burstCount");
		wordCount.simWatch("wordCount");

		LMemCommandStream.makeKernelOutput("cmdStream",
				(wordCount === 0 & (burstCount < totalBursts)), // control
				startAddr + burstCount,                         // address
				constant.var(dfeUInt(8), 1),                    // size
				constant.var(dfeUInt(1), 0),                    // inc
				constant.var(dfeUInt(1), 0),                    // stream
				burstCount === (totalBursts - 1));              // signal
	}

}
