package com.maxeler.packetCapture.prototype;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.networking.types.EthernetRXType;

// packs as many rx frames into burst size and pad the remaining with EOF
class CaptureKernel extends Kernel
{

	CaptureKernel( KernelParameters parameters, Types types )
	{
		super(parameters);
		this.flush.disabled();

		EthernetRXType frameChunkType = types.datumType;
		DFEPaddedStructType frameChunkPaddedType = types.datumPaddedType;
		DFEStruct frameChunkPadded = frameChunkPaddedType.newPaddedInstance(this);

		NonBlockingInput<DFEStruct> in = io.nonBlockingInput("input", frameChunkType, constant.var(true), 1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);

		frameChunkPadded.get("datum") <== in.data;

		io.output("packedData", frameChunkPadded, frameChunkPaddedType, in.valid);
	}
}
